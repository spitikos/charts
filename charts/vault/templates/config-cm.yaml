{{- if .Values.configJob.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.fullname" . }}-config-hook
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
data:
  configure.sh: |-
    #!/bin/sh
    set -e

    echo "Waiting for Vault to become active..."
    until vault status -address="http://{{ include "common.fullname" . }}:8200" | grep -q "Sealed.*false"; do
      sleep 2
    done
    echo "Vault is unsealed and active."

    # 1. Enable Kubernetes Auth Method if not already enabled
    echo "Enabling Kubernetes auth method..."
    vault auth list | grep -q "kubernetes/" || vault auth enable kubernetes

    # 2. Configure Kubernetes Auth Method
    echo "Configuring Kubernetes auth method..."
    vault write auth/kubernetes/config \
      kubernetes_host="https://kubernetes.default.svc" \
      token_reviewer_jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token \
      kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      issuer="https://kubernetes.default.svc"

    # 3. Create the API Policy
    echo "Creating API policy..."
    vault policy write api - <<EOF
    path "spitikos/data/api" {
      capabilities = ["read"]
    }
    EOF

    # 4. Create the API Role
    echo "Creating API role..."
    vault write auth/kubernetes/role/api \
      bound_service_account_names=api \
      bound_service_account_namespaces=api \
      policies=api \
      ttl=24h

    # 5. Enable Spitikos KV Engine
    echo "Enabling Spitikos KV engine..."
    vault secrets list | grep -q "spitikos/" || vault secrets enable -path=spitikos kv-v2

    # 6. Enable Personal KV Engine
    echo "Enabling Personal KV engine..."
    vault secrets list | grep -q "personal/" || vault secrets enable -path=personal kv-v2

    echo "Vault configuration complete."
{{- end }}
